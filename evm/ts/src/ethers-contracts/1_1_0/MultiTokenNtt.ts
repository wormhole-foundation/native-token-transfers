/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common.js";

export type TokenMetaStruct = {
  name: BytesLike;
  symbol: BytesLike;
  decimals: BigNumberish;
};

export type TokenMetaStructOutput = [
  name: string,
  symbol: string,
  decimals: bigint
] & { name: string; symbol: string; decimals: bigint };

export type TokenIdStruct = { chainId: BigNumberish; tokenAddress: BytesLike };

export type TokenIdStructOutput = [chainId: bigint, tokenAddress: string] & {
  chainId: bigint;
  tokenAddress: string;
};

export type TokenInfoStruct = { meta: TokenMetaStruct; token: TokenIdStruct };

export type TokenInfoStructOutput = [
  meta: TokenMetaStructOutput,
  token: TokenIdStructOutput
] & { meta: TokenMetaStructOutput; token: TokenIdStructOutput };

export declare namespace NativeTokenTransferCodec {
  export type NativeTokenTransferStruct = {
    amount: BigNumberish;
    token: TokenInfoStruct;
    sender: BytesLike;
    to: BytesLike;
    additionalPayload: BytesLike;
  };

  export type NativeTokenTransferStructOutput = [
    amount: bigint,
    token: TokenInfoStructOutput,
    sender: string,
    to: string,
    additionalPayload: string
  ] & {
    amount: bigint;
    token: TokenInfoStructOutput;
    sender: string;
    to: string;
    additionalPayload: string;
  };
}

export declare namespace RateLimitLib {
  export type RateLimitParamsStruct = {
    limit: BigNumberish;
    currentCapacity: BigNumberish;
    lastTxTimestamp: BigNumberish;
  };

  export type RateLimitParamsStructOutput = [
    limit: bigint,
    currentCapacity: bigint,
    lastTxTimestamp: bigint
  ] & { limit: bigint; currentCapacity: bigint; lastTxTimestamp: bigint };
}

export declare namespace IMultiTokenRateLimiter {
  export type InboundQueuedTransferStruct = {
    txTimestamp: BigNumberish;
    sourceChainId: BigNumberish;
  };

  export type InboundQueuedTransferStructOutput = [
    txTimestamp: bigint,
    sourceChainId: bigint
  ] & { txTimestamp: bigint; sourceChainId: bigint };

  export type OutboundQueuedTransferStruct = {
    recipient: BytesLike;
    refundAddress: BytesLike;
    sender: AddressLike;
    amount: BigNumberish;
    recipientChain: BigNumberish;
    txTimestamp: BigNumberish;
    token: AddressLike;
    transceiverInstructions: BytesLike;
  };

  export type OutboundQueuedTransferStructOutput = [
    recipient: string,
    refundAddress: string,
    sender: string,
    amount: bigint,
    recipientChain: bigint,
    txTimestamp: bigint,
    token: string,
    transceiverInstructions: string
  ] & {
    recipient: string;
    refundAddress: string;
    sender: string;
    amount: bigint;
    recipientChain: bigint;
    txTimestamp: bigint;
    token: string;
    transceiverInstructions: string;
  };
}

export declare namespace Peers {
  export type PeerStruct = { peerAddress: BytesLike };

  export type PeerStructOutput = [peerAddress: string] & {
    peerAddress: string;
  };
}

export declare namespace MultiTokenNtt {
  export type TransferArgsStruct = {
    token: AddressLike;
    amount: BigNumberish;
    recipientChain: BigNumberish;
    recipient: BytesLike;
    refundAddress: BytesLike;
    shouldQueue: boolean;
    transceiverInstructions: BytesLike;
    additionalPayload: BytesLike;
  };

  export type TransferArgsStructOutput = [
    token: string,
    amount: bigint,
    recipientChain: bigint,
    recipient: string,
    refundAddress: string,
    shouldQueue: boolean,
    transceiverInstructions: string,
    additionalPayload: string
  ] & {
    token: string;
    amount: bigint;
    recipientChain: bigint;
    recipient: string;
    refundAddress: string;
    shouldQueue: boolean;
    transceiverInstructions: string;
    additionalPayload: string;
  };

  export type GasTokenTransferArgsStruct = {
    amount: BigNumberish;
    recipientChain: BigNumberish;
    recipient: BytesLike;
    refundAddress: BytesLike;
    shouldQueue: boolean;
    transceiverInstructions: BytesLike;
    additionalPayload: BytesLike;
  };

  export type GasTokenTransferArgsStructOutput = [
    amount: bigint,
    recipientChain: bigint,
    recipient: string,
    refundAddress: string,
    shouldQueue: boolean,
    transceiverInstructions: string,
    additionalPayload: string
  ] & {
    amount: bigint;
    recipientChain: bigint;
    recipient: string;
    refundAddress: string;
    shouldQueue: boolean;
    transceiverInstructions: string;
    additionalPayload: string;
  };
}

export interface MultiTokenNttInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "NTT_MANAGER_VERSION"
      | "WETH"
      | "cancelOutboundQueuedTransfer"
      | "completeInboundQueuedTransfer"
      | "completeOutboundQueuedTransfer"
      | "getCurrentInboundCapacity"
      | "getCurrentOutboundCapacity"
      | "getInboundLimitParams"
      | "getInboundQueuedTransfer"
      | "getMigratesImmutables"
      | "getOutboundLimitParams"
      | "getOutboundQueuedTransfer"
      | "getPeer"
      | "getToken"
      | "getTokenId"
      | "gmpManager"
      | "initialize"
      | "isPaused"
      | "migrate"
      | "overrideLocalAsset"
      | "owner"
      | "pause"
      | "pauser"
      | "rateLimitDuration"
      | "receiveMessage"
      | "setInboundLimit"
      | "setOutboundLimit"
      | "setPeer"
      | "tokenImplementation"
      | "tokenProxyCreationCode"
      | "transfer"
      | "transferOwnership"
      | "transferPauserCapability"
      | "unpause"
      | "upgrade"
      | "wrapAndTransferGasToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "InboundTransferLimitUpdated"
      | "InboundTransferQueued"
      | "Initialized"
      | "NotPaused"
      | "OutboundTransferCancelled"
      | "OutboundTransferLimitUpdated"
      | "OutboundTransferQueued"
      | "OutboundTransferRateLimited"
      | "OwnershipTransferred"
      | "Paused"
      | "PauserTransferred"
      | "PeerUpdated"
      | "TransferRedeemed"
      | "TransferSent"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "NTT_MANAGER_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelOutboundQueuedTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeInboundQueuedTransfer",
    values: [NativeTokenTransferCodec.NativeTokenTransferStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "completeOutboundQueuedTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentInboundCapacity",
    values: [TokenIdStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentOutboundCapacity",
    values: [TokenIdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getInboundLimitParams",
    values: [TokenIdStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInboundQueuedTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMigratesImmutables",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOutboundLimitParams",
    values: [TokenIdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutboundQueuedTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPeer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getToken",
    values: [TokenIdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "gmpManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(functionFragment: "migrate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "overrideLocalAsset",
    values: [TokenIdStruct, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "pauser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rateLimitDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveMessage",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setInboundLimit",
    values: [TokenIdStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOutboundLimit",
    values: [TokenIdStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeer",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenProxyCreationCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [MultiTokenNtt.TransferArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPauserCapability",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapAndTransferGasToken",
    values: [MultiTokenNtt.GasTokenTransferArgsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "NTT_MANAGER_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOutboundQueuedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeInboundQueuedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeOutboundQueuedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentInboundCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentOutboundCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInboundLimitParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInboundQueuedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMigratesImmutables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutboundLimitParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutboundQueuedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPeer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokenId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gmpManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "overrideLocalAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rateLimitDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInboundLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOutboundLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenProxyCreationCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPauserCapability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wrapAndTransferGasToken",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InboundTransferLimitUpdatedEvent {
  export type InputTuple = [
    chainId: BigNumberish,
    oldLimit: BigNumberish,
    newLimit: BigNumberish
  ];
  export type OutputTuple = [
    chainId: bigint,
    oldLimit: bigint,
    newLimit: bigint
  ];
  export interface OutputObject {
    chainId: bigint;
    oldLimit: bigint;
    newLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InboundTransferQueuedEvent {
  export type InputTuple = [digest: BytesLike];
  export type OutputTuple = [digest: string];
  export interface OutputObject {
    digest: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NotPausedEvent {
  export type InputTuple = [notPaused: boolean];
  export type OutputTuple = [notPaused: boolean];
  export interface OutputObject {
    notPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OutboundTransferCancelledEvent {
  export type InputTuple = [
    sequence: BigNumberish,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    sequence: bigint,
    recipient: string,
    amount: bigint
  ];
  export interface OutputObject {
    sequence: bigint;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OutboundTransferLimitUpdatedEvent {
  export type InputTuple = [oldLimit: BigNumberish, newLimit: BigNumberish];
  export type OutputTuple = [oldLimit: bigint, newLimit: bigint];
  export interface OutputObject {
    oldLimit: bigint;
    newLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OutboundTransferQueuedEvent {
  export type InputTuple = [queueSequence: BigNumberish];
  export type OutputTuple = [queueSequence: bigint];
  export interface OutputObject {
    queueSequence: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OutboundTransferRateLimitedEvent {
  export type InputTuple = [
    sender: AddressLike,
    sequence: BigNumberish,
    amount: BigNumberish,
    currentCapacity: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    sequence: bigint,
    amount: bigint,
    currentCapacity: bigint
  ];
  export interface OutputObject {
    sender: string;
    sequence: bigint;
    amount: bigint;
    currentCapacity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [paused: boolean];
  export type OutputTuple = [paused: boolean];
  export interface OutputObject {
    paused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauserTransferredEvent {
  export type InputTuple = [oldPauser: AddressLike, newPauser: AddressLike];
  export type OutputTuple = [oldPauser: string, newPauser: string];
  export interface OutputObject {
    oldPauser: string;
    newPauser: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PeerUpdatedEvent {
  export type InputTuple = [
    chainId: BigNumberish,
    oldPeerAddress: BytesLike,
    newPeerAddress: BytesLike
  ];
  export type OutputTuple = [
    chainId: bigint,
    oldPeerAddress: string,
    newPeerAddress: string
  ];
  export interface OutputObject {
    chainId: bigint;
    oldPeerAddress: string;
    newPeerAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferRedeemedEvent {
  export type InputTuple = [digest: BytesLike];
  export type OutputTuple = [digest: string];
  export interface OutputObject {
    digest: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSentEvent {
  export type InputTuple = [
    sequence: BigNumberish,
    tokenChain: BigNumberish,
    token: BytesLike,
    recipient: BytesLike,
    refundAddress: BytesLike,
    amount: BigNumberish,
    toChain: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    sequence: bigint,
    tokenChain: bigint,
    token: string,
    recipient: string,
    refundAddress: string,
    amount: bigint,
    toChain: bigint,
    sender: string
  ];
  export interface OutputObject {
    sequence: bigint;
    tokenChain: bigint;
    token: string;
    recipient: string;
    refundAddress: string;
    amount: bigint;
    toChain: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MultiTokenNtt extends BaseContract {
  connect(runner?: ContractRunner | null): MultiTokenNtt;
  waitForDeployment(): Promise<this>;

  interface: MultiTokenNttInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  NTT_MANAGER_VERSION: TypedContractMethod<[], [string], "view">;

  WETH: TypedContractMethod<[], [string], "view">;

  cancelOutboundQueuedTransfer: TypedContractMethod<
    [messageSequence: BigNumberish],
    [void],
    "nonpayable"
  >;

  completeInboundQueuedTransfer: TypedContractMethod<
    [nativeTokenTransfer: NativeTokenTransferCodec.NativeTokenTransferStruct],
    [void],
    "nonpayable"
  >;

  completeOutboundQueuedTransfer: TypedContractMethod<
    [messageSequence: BigNumberish],
    [bigint],
    "payable"
  >;

  getCurrentInboundCapacity: TypedContractMethod<
    [tokenId: TokenIdStruct, chainId_: BigNumberish],
    [bigint],
    "view"
  >;

  getCurrentOutboundCapacity: TypedContractMethod<
    [tokenId: TokenIdStruct],
    [bigint],
    "view"
  >;

  getInboundLimitParams: TypedContractMethod<
    [tokenId: TokenIdStruct, chainId_: BigNumberish],
    [RateLimitLib.RateLimitParamsStructOutput],
    "view"
  >;

  getInboundQueuedTransfer: TypedContractMethod<
    [digest: BytesLike],
    [IMultiTokenRateLimiter.InboundQueuedTransferStructOutput],
    "view"
  >;

  getMigratesImmutables: TypedContractMethod<[], [boolean], "view">;

  getOutboundLimitParams: TypedContractMethod<
    [tokenId: TokenIdStruct],
    [RateLimitLib.RateLimitParamsStructOutput],
    "view"
  >;

  getOutboundQueuedTransfer: TypedContractMethod<
    [queueSequence: BigNumberish],
    [IMultiTokenRateLimiter.OutboundQueuedTransferStructOutput],
    "view"
  >;

  getPeer: TypedContractMethod<
    [chainId_: BigNumberish],
    [Peers.PeerStructOutput],
    "view"
  >;

  getToken: TypedContractMethod<[tokenId: TokenIdStruct], [string], "view">;

  getTokenId: TypedContractMethod<
    [token: AddressLike],
    [[TokenIdStructOutput, bigint]],
    "view"
  >;

  gmpManager: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<[], [void], "payable">;

  isPaused: TypedContractMethod<[], [boolean], "view">;

  migrate: TypedContractMethod<[], [void], "nonpayable">;

  overrideLocalAsset: TypedContractMethod<
    [token: TokenIdStruct, localToken: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  pauser: TypedContractMethod<[], [string], "view">;

  rateLimitDuration: TypedContractMethod<[], [bigint], "view">;

  receiveMessage: TypedContractMethod<
    [sourceChainId: BigNumberish, sender: BytesLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  setInboundLimit: TypedContractMethod<
    [token: TokenIdStruct, limit: BigNumberish, chainId_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOutboundLimit: TypedContractMethod<
    [token: TokenIdStruct, limit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPeer: TypedContractMethod<
    [_chainId: BigNumberish, peerAddress: BytesLike],
    [void],
    "nonpayable"
  >;

  tokenImplementation: TypedContractMethod<[], [string], "view">;

  tokenProxyCreationCode: TypedContractMethod<[], [string], "view">;

  transfer: TypedContractMethod<
    [args: MultiTokenNtt.TransferArgsStruct],
    [bigint],
    "payable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferPauserCapability: TypedContractMethod<
    [newPauser: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  upgrade: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  wrapAndTransferGasToken: TypedContractMethod<
    [args: MultiTokenNtt.GasTokenTransferArgsStruct],
    [bigint],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "NTT_MANAGER_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cancelOutboundQueuedTransfer"
  ): TypedContractMethod<[messageSequence: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completeInboundQueuedTransfer"
  ): TypedContractMethod<
    [nativeTokenTransfer: NativeTokenTransferCodec.NativeTokenTransferStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "completeOutboundQueuedTransfer"
  ): TypedContractMethod<[messageSequence: BigNumberish], [bigint], "payable">;
  getFunction(
    nameOrSignature: "getCurrentInboundCapacity"
  ): TypedContractMethod<
    [tokenId: TokenIdStruct, chainId_: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentOutboundCapacity"
  ): TypedContractMethod<[tokenId: TokenIdStruct], [bigint], "view">;
  getFunction(
    nameOrSignature: "getInboundLimitParams"
  ): TypedContractMethod<
    [tokenId: TokenIdStruct, chainId_: BigNumberish],
    [RateLimitLib.RateLimitParamsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInboundQueuedTransfer"
  ): TypedContractMethod<
    [digest: BytesLike],
    [IMultiTokenRateLimiter.InboundQueuedTransferStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMigratesImmutables"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getOutboundLimitParams"
  ): TypedContractMethod<
    [tokenId: TokenIdStruct],
    [RateLimitLib.RateLimitParamsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOutboundQueuedTransfer"
  ): TypedContractMethod<
    [queueSequence: BigNumberish],
    [IMultiTokenRateLimiter.OutboundQueuedTransferStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPeer"
  ): TypedContractMethod<
    [chainId_: BigNumberish],
    [Peers.PeerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getToken"
  ): TypedContractMethod<[tokenId: TokenIdStruct], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenId"
  ): TypedContractMethod<
    [token: AddressLike],
    [[TokenIdStructOutput, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "gmpManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "isPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "migrate"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "overrideLocalAsset"
  ): TypedContractMethod<
    [token: TokenIdStruct, localToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pauser"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rateLimitDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "receiveMessage"
  ): TypedContractMethod<
    [sourceChainId: BigNumberish, sender: BytesLike, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setInboundLimit"
  ): TypedContractMethod<
    [token: TokenIdStruct, limit: BigNumberish, chainId_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOutboundLimit"
  ): TypedContractMethod<
    [token: TokenIdStruct, limit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPeer"
  ): TypedContractMethod<
    [_chainId: BigNumberish, peerAddress: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenProxyCreationCode"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [args: MultiTokenNtt.TransferArgsStruct],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferPauserCapability"
  ): TypedContractMethod<[newPauser: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgrade"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "wrapAndTransferGasToken"
  ): TypedContractMethod<
    [args: MultiTokenNtt.GasTokenTransferArgsStruct],
    [bigint],
    "payable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "InboundTransferLimitUpdated"
  ): TypedContractEvent<
    InboundTransferLimitUpdatedEvent.InputTuple,
    InboundTransferLimitUpdatedEvent.OutputTuple,
    InboundTransferLimitUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "InboundTransferQueued"
  ): TypedContractEvent<
    InboundTransferQueuedEvent.InputTuple,
    InboundTransferQueuedEvent.OutputTuple,
    InboundTransferQueuedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NotPaused"
  ): TypedContractEvent<
    NotPausedEvent.InputTuple,
    NotPausedEvent.OutputTuple,
    NotPausedEvent.OutputObject
  >;
  getEvent(
    key: "OutboundTransferCancelled"
  ): TypedContractEvent<
    OutboundTransferCancelledEvent.InputTuple,
    OutboundTransferCancelledEvent.OutputTuple,
    OutboundTransferCancelledEvent.OutputObject
  >;
  getEvent(
    key: "OutboundTransferLimitUpdated"
  ): TypedContractEvent<
    OutboundTransferLimitUpdatedEvent.InputTuple,
    OutboundTransferLimitUpdatedEvent.OutputTuple,
    OutboundTransferLimitUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OutboundTransferQueued"
  ): TypedContractEvent<
    OutboundTransferQueuedEvent.InputTuple,
    OutboundTransferQueuedEvent.OutputTuple,
    OutboundTransferQueuedEvent.OutputObject
  >;
  getEvent(
    key: "OutboundTransferRateLimited"
  ): TypedContractEvent<
    OutboundTransferRateLimitedEvent.InputTuple,
    OutboundTransferRateLimitedEvent.OutputTuple,
    OutboundTransferRateLimitedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PauserTransferred"
  ): TypedContractEvent<
    PauserTransferredEvent.InputTuple,
    PauserTransferredEvent.OutputTuple,
    PauserTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PeerUpdated"
  ): TypedContractEvent<
    PeerUpdatedEvent.InputTuple,
    PeerUpdatedEvent.OutputTuple,
    PeerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TransferRedeemed"
  ): TypedContractEvent<
    TransferRedeemedEvent.InputTuple,
    TransferRedeemedEvent.OutputTuple,
    TransferRedeemedEvent.OutputObject
  >;
  getEvent(
    key: "TransferSent"
  ): TypedContractEvent<
    TransferSentEvent.InputTuple,
    TransferSentEvent.OutputTuple,
    TransferSentEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "InboundTransferLimitUpdated(uint16,uint256,uint256)": TypedContractEvent<
      InboundTransferLimitUpdatedEvent.InputTuple,
      InboundTransferLimitUpdatedEvent.OutputTuple,
      InboundTransferLimitUpdatedEvent.OutputObject
    >;
    InboundTransferLimitUpdated: TypedContractEvent<
      InboundTransferLimitUpdatedEvent.InputTuple,
      InboundTransferLimitUpdatedEvent.OutputTuple,
      InboundTransferLimitUpdatedEvent.OutputObject
    >;

    "InboundTransferQueued(bytes32)": TypedContractEvent<
      InboundTransferQueuedEvent.InputTuple,
      InboundTransferQueuedEvent.OutputTuple,
      InboundTransferQueuedEvent.OutputObject
    >;
    InboundTransferQueued: TypedContractEvent<
      InboundTransferQueuedEvent.InputTuple,
      InboundTransferQueuedEvent.OutputTuple,
      InboundTransferQueuedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NotPaused(bool)": TypedContractEvent<
      NotPausedEvent.InputTuple,
      NotPausedEvent.OutputTuple,
      NotPausedEvent.OutputObject
    >;
    NotPaused: TypedContractEvent<
      NotPausedEvent.InputTuple,
      NotPausedEvent.OutputTuple,
      NotPausedEvent.OutputObject
    >;

    "OutboundTransferCancelled(uint256,address,uint256)": TypedContractEvent<
      OutboundTransferCancelledEvent.InputTuple,
      OutboundTransferCancelledEvent.OutputTuple,
      OutboundTransferCancelledEvent.OutputObject
    >;
    OutboundTransferCancelled: TypedContractEvent<
      OutboundTransferCancelledEvent.InputTuple,
      OutboundTransferCancelledEvent.OutputTuple,
      OutboundTransferCancelledEvent.OutputObject
    >;

    "OutboundTransferLimitUpdated(uint256,uint256)": TypedContractEvent<
      OutboundTransferLimitUpdatedEvent.InputTuple,
      OutboundTransferLimitUpdatedEvent.OutputTuple,
      OutboundTransferLimitUpdatedEvent.OutputObject
    >;
    OutboundTransferLimitUpdated: TypedContractEvent<
      OutboundTransferLimitUpdatedEvent.InputTuple,
      OutboundTransferLimitUpdatedEvent.OutputTuple,
      OutboundTransferLimitUpdatedEvent.OutputObject
    >;

    "OutboundTransferQueued(uint64)": TypedContractEvent<
      OutboundTransferQueuedEvent.InputTuple,
      OutboundTransferQueuedEvent.OutputTuple,
      OutboundTransferQueuedEvent.OutputObject
    >;
    OutboundTransferQueued: TypedContractEvent<
      OutboundTransferQueuedEvent.InputTuple,
      OutboundTransferQueuedEvent.OutputTuple,
      OutboundTransferQueuedEvent.OutputObject
    >;

    "OutboundTransferRateLimited(address,uint64,uint256,uint256)": TypedContractEvent<
      OutboundTransferRateLimitedEvent.InputTuple,
      OutboundTransferRateLimitedEvent.OutputTuple,
      OutboundTransferRateLimitedEvent.OutputObject
    >;
    OutboundTransferRateLimited: TypedContractEvent<
      OutboundTransferRateLimitedEvent.InputTuple,
      OutboundTransferRateLimitedEvent.OutputTuple,
      OutboundTransferRateLimitedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(bool)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PauserTransferred(address,address)": TypedContractEvent<
      PauserTransferredEvent.InputTuple,
      PauserTransferredEvent.OutputTuple,
      PauserTransferredEvent.OutputObject
    >;
    PauserTransferred: TypedContractEvent<
      PauserTransferredEvent.InputTuple,
      PauserTransferredEvent.OutputTuple,
      PauserTransferredEvent.OutputObject
    >;

    "PeerUpdated(uint16,bytes32,bytes32)": TypedContractEvent<
      PeerUpdatedEvent.InputTuple,
      PeerUpdatedEvent.OutputTuple,
      PeerUpdatedEvent.OutputObject
    >;
    PeerUpdated: TypedContractEvent<
      PeerUpdatedEvent.InputTuple,
      PeerUpdatedEvent.OutputTuple,
      PeerUpdatedEvent.OutputObject
    >;

    "TransferRedeemed(bytes32)": TypedContractEvent<
      TransferRedeemedEvent.InputTuple,
      TransferRedeemedEvent.OutputTuple,
      TransferRedeemedEvent.OutputObject
    >;
    TransferRedeemed: TypedContractEvent<
      TransferRedeemedEvent.InputTuple,
      TransferRedeemedEvent.OutputTuple,
      TransferRedeemedEvent.OutputObject
    >;

    "TransferSent(uint64,uint16,bytes32,bytes32,bytes32,uint256,uint16,address)": TypedContractEvent<
      TransferSentEvent.InputTuple,
      TransferSentEvent.OutputTuple,
      TransferSentEvent.OutputObject
    >;
    TransferSent: TypedContractEvent<
      TransferSentEvent.InputTuple,
      TransferSentEvent.OutputTuple,
      TransferSentEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
